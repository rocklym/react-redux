1、Linus Torvals said
差劲的程序员操心代码，优秀的程序员操心数据结构和它们之间的关系


2、答疑
a.关于写不写分号:只有下一行为括号，方括号，正则开头的斜杠，加号，减号这五个token时，才必须写（解释器不会自动加）
b.gulp: 基于node.js的一个前端自动化构建工具，开发这可以使用它构建自动化工作流程（前端集成开发环境）,如创建package.json文件
c.webpack：模块打包机；分析你的项目结构，找到JavaScript模块以及其它浏览器不能直接运行的拓展语言（如TypeScript），并将其打包为合适的格式以供浏览器使用。
d.babel: 把各种javascript千奇百怪的语言标准（ES5,ES6）统统专为浏览器可以认识的语言
e.父组件： render给儿子的，这叫奉献


3、React组件的数据
### prop: 对外接口（不可改变）
a.当prop的类型不是string时，在JSX中必须用{}把prop值包住， 如 <SampleButton id="sample" borderWidth={2} onClick={onButtonClick} sytle={{color: "red"}}
b.函数类型的prop等于父组件（import子组件的组件）交给了子组件一个回调函数，子组件在恰当的时机调用函数类型的prop；可以当上必要的参数，这样就可以反过来把info传递给外部世界（父组件）
c.子组件在constructor中一定要super（props）来调用父类React.Component的构造函数，不然类实例的所有成员函数就无法通过this.props访问父组件传递过来的props值
d.ES6方法创造的React组件类不会自动绑定this到当前实例对象，需手动 this.onClickIncrementButton = this.onClickIncrementButton.bind(this);
e.析构赋值（destructuring assignment）: const {caption} = this.props;
f.propTypes检查（从prop-types导入）：Counter.PropTypes = { caption: PropTypes.string.isRequired };
### state: 对内接口（让组件来改变）
a.修改state的值用setState()函数，而不能直接修改，因为直接修改this.state的值，组件不会重新渲染，如this.setState({ count: this.state.count + 1 })



4、组件的生命周期
A.装载（mount）
a.constructor
# 初始化state
# 绑定成员函数的this环境，让函数被调用时，this始终指向当前组件实例
b.getInitialState & getDefaultProps
# ES6语法定义的React组件中根本不会用到
c.componentWillMount
# 通常不定义，因为都提前到constructor中做了
# 可以在浏览器中被调用，也可以在服务端被调用
e.render
# 只返回一个JSX描述的结构，最终由React来操作渲染过程
# 是一个纯函数，不应该引起状态的改变
e.componentDidMount
# 不是被立刻调用，而是在render函数返回的熟悉已经引发了渲染，组件已经被mount大DOM树上后才被调用；即调用所有render，装载，调用DidMount
# 只能在浏览器被调用

B.更新(update)
a.componentWillReceiveProps(nextProps)
# 父组件的render函数被调用，不管props有没有改变，都会触发字组件的componentWillReceiveProps函数
# this.setState方法触发的更新过程不会调用这个函数，因为根据props变化更新state用的就是方法，如果调用就死循环了
b.shouldComponentUpdate(nextProps, nextState)
# 和render是唯二两个要求去有返回结果的函数，render返回结果用于构造DOM对象，而shouldComponentUpdate返回一个布尔值，标识是否需要更新
