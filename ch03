########################################### 
Flux框架
########################################### 
1.Action->Dispatcher->Store->View--->Dispatcher
2.Dispatcher自始至终只需要暴露一个函数Dispatch，增加新功能只是增加Action
3.安装： npm install --save flux
4.Flux的优势： 单向数据流，store中只有get方法，没有set方法，要改变界面，必须改变store状态，必须通过派发一个action对象实现
5.Flux的不足
a.store之间有依赖关系：waitFor接受dispatchToken
b.难以进行服务器端渲染：服务器端渲染输出的不是DOM树，而是一个字符串；服务器端要同事接受多个用户请求，Store无法保证线程安全
c.Store混杂了逻辑和状态：动态替换Store显得很不现实，无法保持Store中存储的状态


1.Dispatcher  
a.引入flux中的Dispatcher类，创造一个新的对象然后export，如export default new Dispatcher();

2.action
a.定义action类型， 如export const INCREMENT = 'increment';
b.定义action的构造函数
export const increment = (counterCaption) => {
    AppDispatcher.dispatch({
        type: ActionTypes.INCREMENT,
        counterCaption: counterCaption
    });
};
c.action对象中必须由type字段，类型是string，用于表明action对象的类型；也可以包含其他字段，如caption之类

3.Store
a.用消息的方式建立Store和View的联系，Object.assign扩展EventEmitter.prototype，用emitChange，addChangeListener，removeChangeListener封装emit，on，removeListener，来完成对状态的更新的广播，添加监听和删除监听
b.store使用AppDispatcher的register函数注册到全局唯一的Dispatcher上，返回一个token，用于store间的同步;resiger本质是dispatch的回调函数，来响应分发
c.SummaryStore不存储数据，每次通过getSummary直接从CounterStore获取数据并计
d.为了保证回调register的响应顺序正确，在SummaryStore中的register中AppDispatcher.waitFor([CounterStore.dispatchToken])，waitFor中回调函数执行结束后才能继续
e.Flux的dispatcher关联的register函数，在任何action被派发时都会被调用，不能指定action类型

4.View
a.View本身是一个独立的部分，可以用任意一种UI库来实现，只是推荐一起用React搞定
b.组件state初始化的来源不再是prop，而是Flux的Store



########################################### 
Redux框架
########################################### 
1.唯一数据源：所有的状态都保存在一个Store里面；这个唯一Store上的状态，是一个树形的对象
2.保持状态只读：不能直接去修改状态，用通过创建一个新的对象返回给Redux，有Redux完成新的状态的组装。
3.数据改变只能通过纯函数完成
a.Reducer，Redux=Reducer+Flux
b.reducer(state, action)

# 纯redux版本
1.action构造函数都返回一个action对象，而不是通过调用Dispatcher的dispatch函数派发出去
2.store中使用扩展操作符（...），把state字段扩展开，并对counterCaption赋新值，下面两种写法等价
################################################
return { ...state, [couterCaption]: state[couterCaption] + 1 };

const newState = Object.assign({}, state);
newState[counterCaption] ++;
return newState;
################################################
绝对不能直接修改state
3.通过store.getState()就能获取到store上存储的所有状态，如store.getState()[this.props.caption]
4.componentDidMount和componentWillUnmount函数中，对应的store.subscribe(this.onChange)和store.unsubscribe(this.onChange)


# redux with smart&dumb
1.容器组件：负责与redux Store打交道，外层，聪明，用props与傻瓜通信，负责传props给展示组件
2.展示组件：只负责渲染页面，内层，傻瓜，不需要有状态state了，只有一个render


# redux with context
1.每个React组件的props中都有一个特殊属性children，代表子组件，比如Provider中this.props.children就是如下的<ControlPanel />
<Provider>
  <ControlPanel />
</Provider>
2.Provider中提供一个函数getChildContext，返回store，要求使用者通过prop传递进来
3.Provider需要定义类的Provider.childContextTypes，必须和getChildContext对应




