# Tips
1.对于只return一个对象的函数体，ES6允许简写省去return，直接用（）把返回的对象包起来
2.返回一个增加了对象的数组，return [ newObject, ...state ]


# 应用架构
1.代码文件的组织结构
a.如果按MVC的模式去按角色组织（action一类，reducer一类），修改一个功能就得修改多个文件，十分繁琐
b.Redux应用适合于按功能组织划分结构，TodoList一个组织，Filter一个组织，因为，“我们应该通过代码就能增加系统的功能，而不是通过对现有代码的修改来增加功能”
2.确定模块的边界
a.在每个功能的index.js文件中导入另一个功能的代码，
A导出: export { actions, reducer, view }
B导入：import { actions, reducer, view as TodoList } from '../todoList'(默认导入的就是index.js)
3.Store的状态树设计
a.一个模块控制一个状态节点；
# 指的是“修改权”，store.getState总能获取当前整个状态树的数据
b.避免冗余数据
# 相对于性能问题，数据一致性的问题才更加重要
c.树形结构扁平

